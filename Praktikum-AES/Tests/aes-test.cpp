#include <gtest/gtest.h>
#include "gmock/gmock.h"
#include "AESCipher.h"
#include "AESMath.h"
#include "AESState.h"
#include "AESKeySchedule.h"

class AesStateTest: public ::testing::Test {
protected:
    void SetUp() override {
        debug_mode = false;
        state = new AESState(aesmath, debug_mode);
        ks = new AESKeySchedule(aesmath, debug_mode);

        byte pt[] {
            0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11,
            0x22, 0x22, 0x22, 0x22, 0x33, 0x33, 0x33, 0x33
        };

        vector<byte> key { 
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f 
        };

        ASSERT_EQ(true, ks->setKey(key));
        state->set(pt);
    }
    void TearDown() override {
        delete state;
        delete ks;
        state = nullptr;
        ks = nullptr;
    }

    bool debug_mode;
    AESMath aesmath;
    AESState* state;
    AESKeySchedule* ks;
};

TEST(AesTest, Parity) {
    EXPECT_EQ(0, AESMath::parity(0x63));
    EXPECT_EQ(1, AESMath::parity(0x64));
    EXPECT_EQ(0, AESMath::parity(0x0));
    EXPECT_EQ(1, AESMath::parity(0b1010001));
    EXPECT_EQ(0, AESMath::parity(0b1101001));
    EXPECT_EQ(1, AESMath::parity(0b1111111));
    EXPECT_EQ(1, AESMath::parity(0x1f));
    EXPECT_EQ(1, AESMath::parity(0x43));
    EXPECT_EQ(1, AESMath::parity(0xea));
    EXPECT_EQ(0, AESMath::parity(0xff));
    EXPECT_EQ(1, AESMath::parity(0xf1));
}

TEST(AesTest, Inv) {
    AESMath aesmath;

    vector<byte> v { 
        0x57, 0xf9, 0xab, 0x8e, 0x65, 
        0x01, 0x91, 0x4b, 0x02, 0xff, 
        0x09, 0xed, 0xba 
    };

    vector<byte> e {
        0xbf, 0x9c, 0x4a, 0xb9, 0xa6,
        0x01, 0x6a, 0x13, 0x8d, 0x1c,
        0x4f, 0x50, 0x76
    };

    for(auto i = 0; i < v.size(); ++i) {
        byte inv { aesmath.inv(v[i]) };
        EXPECT_EQ(inv, e[i]);
        EXPECT_EQ(aesmath.mul(v[i], inv), 1);
    }
}

TEST(AesTest, Atrans) {
    AESMath aesmath;

    vector<byte> v { 
        0x00, 0x81, 0x75, 0xab,
        0x4e, 0xea, 0xc6, 0xff
    };

    vector<byte> e {
        0x63, 0xf3, 0xd5, 0xd6,
        0x1e, 0x0e, 0x69, 0x9c
    };

    for(auto i = 0; i < v.size(); ++i) {
        EXPECT_EQ(aesmath.atrans(v[i]), e[i]);
    }
}

TEST(AesTest, Mult) {
    AESMath aesmath;

    EXPECT_EQ(aesmath.mul(6, 6), 20);
    EXPECT_EQ(aesmath.mul(13, 7), 35);
    EXPECT_EQ(aesmath.mul(31, 78), 59);
    EXPECT_EQ(aesmath.mul(0x47, 0x59), 0x25);
    EXPECT_EQ(aesmath.mul(0x00, 0x91), 0);
    EXPECT_EQ(aesmath.mul(0x67, 0x00), 0);
    EXPECT_EQ(aesmath.mul(0xfa, 0xae), 0x1a);
    EXPECT_EQ(aesmath.mul(0x81, 0x42), 0x14);

    EXPECT_EQ(aesmath.rpmul(6, 6), 20);
    EXPECT_EQ(aesmath.rpmul(13, 7), 35);
    EXPECT_EQ(aesmath.rpmul(31, 78), 59);
    EXPECT_EQ(aesmath.rpmul(0x47, 0x59), 0x25);
    EXPECT_EQ(aesmath.rpmul(0x00, 0x91), 0);
    EXPECT_EQ(aesmath.rpmul(0x67, 0x00), 0);
    EXPECT_EQ(aesmath.rpmul(0xfa, 0xae), 0x1a);
    EXPECT_EQ(aesmath.rpmul(0x81, 0x42), 0x14);
    
    for(auto a = 0; a < 255; ++a) {
        for(auto b = 0; b < 255; ++b) {
            EXPECT_EQ(aesmath.mul(a,b), aesmath.rpmul(a,b));
        }
    }
}


TEST(AesTest, add) {
    EXPECT_EQ(AESMath::add(0b00001111, 0b11110000), 0b11111111);
    EXPECT_EQ(AESMath::add(0b11110000, 0b11110000), 0b00000000);
    EXPECT_EQ(AESMath::add(0b11001100, 0b01100110), 0b10101010);
}

TEST(AesTest, XTime) {
    EXPECT_EQ(AESMath::xtime(0x57), 0xae);
    EXPECT_EQ(AESMath::xtime(0xae), 0x47);
    EXPECT_EQ(AESMath::xtime(0x47), 0x8e);
    EXPECT_EQ(AESMath::xtime(0x8e), 0x07);

    EXPECT_EQ(AESMath::xtime(0xf9), 0xe9);
    EXPECT_EQ(AESMath::xtime(0xab), 0x4d);
    EXPECT_EQ(AESMath::xtime(0x65), 0xca);
    EXPECT_EQ(AESMath::xtime(0x01), 0x02);
    EXPECT_EQ(AESMath::xtime(0x91), 0x39);
    EXPECT_EQ(AESMath::xtime(0x4b), 0x96);
}

TEST(AesTest, Generator3) {
    AESMath aesmath;
    const byte g { 0x3 };
    byte x { g };

    vector<byte> e {
        0x03, 0x05, 0x0f, 0x11, 0x33, 0x55, 0xff, 0x1a, 0x2e, 0x72, 
        0x96, 0xa1, 0xf8, 0x13, 0x35, 0x5f, 0xe1, 0x38, 0x48, 0xd8, 
        0x73, 0x95, 0xa4, 0xf7, 0x02, 0x06, 0x0a, 0x1e, 0x22, 0x66, 
        0xaa, 0xe5, 0x34, 0x5c, 0xe4, 0x37, 0x59, 0xeb, 0x26, 0x6a, 
        0xbe, 0xd9, 0x70, 0x90, 0xab, 0xe6, 0x31, 0x53, 0xf5, 0x04, 
        0x0c, 0x14, 0x3c, 0x44, 0xcc, 0x4f, 0xd1, 0x68, 0xb8, 0xd3, 
        0x6e, 0xb2, 0xcd, 0x4c, 0xd4, 0x67, 0xa9, 0xe0, 0x3b, 0x4d, 
        0xd7, 0x62, 0xa6, 0xf1, 0x08, 0x18, 0x28, 0x78, 0x88, 0x83, 
        0x9e, 0xb9, 0xd0, 0x6b, 0xbd, 0xdc, 0x7f, 0x81, 0x98, 0xb3, 
        0xce, 0x49, 0xdb, 0x76, 0x9a, 0xb5, 0xc4, 0x57, 0xf9, 0x10, 
        0x30, 0x50, 0xf0, 0x0b, 0x1d, 0x27, 0x69, 0xbb, 0xd6, 0x61, 
        0xa3, 0xfe, 0x19, 0x2b, 0x7d, 0x87, 0x92, 0xad, 0xec, 0x2f, 
        0x71, 0x93, 0xae, 0xe9, 0x20, 0x60, 0xa0, 0xfb, 0x16, 0x3a, 
        0x4e, 0xd2, 0x6d, 0xb7, 0xc2, 0x5d, 0xe7, 0x32, 0x56, 0xfa, 
        0x15, 0x3f, 0x41, 0xc3, 0x5e, 0xe2, 0x3d, 0x47, 0xc9, 0x40, 
        0xc0, 0x5b, 0xed, 0x2c, 0x74, 0x9c, 0xbf, 0xda, 0x75, 0x9f, 
        0xba, 0xd5, 0x64, 0xac, 0xef, 0x2a, 0x7e, 0x82, 0x9d, 0xbc, 
        0xdf, 0x7a, 0x8e, 0x89, 0x80, 0x9b, 0xb6, 0xc1, 0x58, 0xe8, 
        0x23, 0x65, 0xaf, 0xea, 0x25, 0x6f, 0xb1, 0xc8, 0x43, 0xc5, 
        0x54, 0xfc, 0x1f, 0x21, 0x63, 0xa5, 0xf4, 0x07, 0x09, 0x1b, 
        0x2d, 0x77, 0x99, 0xb0, 0xcb, 0x46, 0xca, 0x45, 0xcf, 0x4a, 
        0xde, 0x79, 0x8b, 0x86, 0x91, 0xa8, 0xe3, 0x3e, 0x42, 0xc6, 
        0x51, 0xf3, 0x0e, 0x12, 0x36, 0x5a, 0xee, 0x29, 0x7b, 0x8d, 
        0x8c, 0x8f, 0x8a, 0x85, 0x94, 0xa7, 0xf2, 0x0d, 0x17, 0x39, 
        0x4b, 0xdd, 0x7c, 0x84, 0x97, 0xa2, 0xfd, 0x1c, 0x24, 0x6c, 
        0xb4, 0xc7, 0x52, 0xf6, 0x01
    };
    
    int c { 1 };
    do {
        EXPECT_EQ(aesmath.exp(c), e[c-1]);
        EXPECT_EQ(x, e[c-1]);

        x = AESMath::rpmul(x, g);
        c++;
    } while (x != 1);
}

TEST(AesTest, Inverse) {
    AESMath aesmath;

    vector<byte> e {
        0x01, 0x8d, 0xf6, 0xcb, 0x52, 0x7b, 0xd1, 0xe8, 0x4f, 0x29, 
        0xc0, 0xb0, 0xe1, 0xe5, 0xc7, 0x74, 0xb4, 0xaa, 0x4b, 0x99, 
        0x2b, 0x60, 0x5f, 0x58, 0x3f, 0xfd, 0xcc, 0xff, 0x40, 0xee, 
        0xb2, 0x3a, 0x6e, 0x5a, 0xf1, 0x55, 0x4d, 0xa8, 0xc9, 0xc1, 
        0x0a, 0x98, 0x15, 0x30, 0x44, 0xa2, 0xc2, 0x2c, 0x45, 0x92, 
        0x6c, 0xf3, 0x39, 0x66, 0x42, 0xf2, 0x35, 0x20, 0x6f, 0x77, 
        0xbb, 0x59, 0x19, 0x1d, 0xfe, 0x37, 0x67, 0x2d, 0x31, 0xf5, 
        0x69, 0xa7, 0x64, 0xab, 0x13, 0x54, 0x25, 0xe9, 0x09, 0xed, 
        0x5c, 0x05, 0xca, 0x4c, 0x24, 0x87, 0xbf, 0x18, 0x3e, 0x22, 
        0xf0, 0x51, 0xec, 0x61, 0x17, 0x16, 0x5e, 0xaf, 0xd3, 0x49, 
        0xa6, 0x36, 0x43, 0xf4, 0x47, 0x91, 0xdf, 0x33, 0x93, 0x21, 
        0x3b, 0x79, 0xb7, 0x97, 0x85, 0x10, 0xb5, 0xba, 0x3c, 0xb6, 
        0x70, 0xd0, 0x06, 0xa1, 0xfa, 0x81, 0x82, 0x83, 0x7e, 0x7f, 
        0x80, 0x96, 0x73, 0xbe, 0x56, 0x9b, 0x9e, 0x95, 0xd9, 0xf7, 
        0x02, 0xb9, 0xa4, 0xde, 0x6a, 0x32, 0x6d, 0xd8, 0x8a, 0x84, 
        0x72, 0x2a, 0x14, 0x9f, 0x88, 0xf9, 0xdc, 0x89, 0x9a, 0xfb, 
        0x7c, 0x2e, 0xc3, 0x8f, 0xb8, 0x65, 0x48, 0x26, 0xc8, 0x12, 
        0x4a, 0xce, 0xe7, 0xd2, 0x62, 0x0c, 0xe0, 0x1f, 0xef, 0x11, 
        0x75, 0x78, 0x71, 0xa5, 0x8e, 0x76, 0x3d, 0xbd, 0xbc, 0x86, 
        0x57, 0x0b, 0x28, 0x2f, 0xa3, 0xda, 0xd4, 0xe4, 0x0f, 0xa9, 
        0x27, 0x53, 0x04, 0x1b, 0xfc, 0xac, 0xe6, 0x7a, 0x07, 0xae, 
        0x63, 0xc5, 0xdb, 0xe2, 0xea, 0x94, 0x8b, 0xc4, 0xd5, 0x9d, 
        0xf8, 0x90, 0x6b, 0xb1, 0x0d, 0xd6, 0xeb, 0xc6, 0x0e, 0xcf, 
        0xad, 0x08, 0x4e, 0xd7, 0xe3, 0x5d, 0x50, 0x1e, 0xb3, 0x5b, 
        0x23, 0x38, 0x34, 0x68, 0x46, 0x03, 0x8c, 0xdd, 0x9c, 0x7d, 
        0xa0, 0xcd, 0x1a, 0x41, 0x1c
    };

    for (size_t i = 1; i <= 255; ++i) {
        byte inv { aesmath.inv(i) };

        EXPECT_EQ(inv, e[i-1]);
        EXPECT_EQ(aesmath.mul(i, inv), 1);
    }
}

TEST(AesTest, SBox) {
    AESMath aesmath;

    vector<byte> sbox {
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 
        0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 
        0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 
        0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 
        0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 
        0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 
        0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 
        0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 
        0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 
        0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 
        0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 
        0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 
        0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 
        0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 
        0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 
        0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 
        0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 
        0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 
        0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 
        0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 
        0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 
        0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 
        0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 
        0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 
        0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 
        0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 
        0x54, 0xbb, 0x16
    };

    vector<byte> inv_sbox {
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 
        0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 
        0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 
        0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 
        0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 
        0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 
        0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 
        0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 
        0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 
        0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 
        0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 
        0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 
        0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 
        0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 
        0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 
        0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 
        0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 
        0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 
        0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 
        0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 
        0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 
        0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 
        0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 
        0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 
        0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 
        0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 
        0x21, 0x0c, 0x7d
    };

    for(size_t i = 0; i < 256; ++i) {
        EXPECT_EQ(aesmath.sBox(i), sbox[i]);
        EXPECT_EQ(aesmath.invSBox(i), inv_sbox[i]);
    }
}

TEST_F(AesStateTest, ShiftRows) {
    using namespace ::testing;

    byte ct[16] { 0 };

    state->shiftRows();
    state->get(ct);
    EXPECT_THAT(ct, ElementsAreArray({
        0x00, 0x11, 0x22, 0x33, 0x11, 0x22, 0x33, 0x00, 
        0x22, 0x33, 0x00, 0x11, 0x33, 0x00, 0x11, 0x22
    }));

    state->invShiftRows();
    state->get(ct);
    EXPECT_THAT(ct, ElementsAreArray({
        0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 
        0x22, 0x22, 0x22, 0x22, 0x33, 0x33, 0x33, 0x33
    }));
}

TEST_F(AesStateTest, SubBytes) {
    using namespace ::testing;

    byte ct[16] { 0 };

    state->subBytes();
    state->get(ct);
    EXPECT_THAT(ct, ElementsAreArray({
        0x63, 0x63, 0x63, 0x63, 0x82, 0x82, 0x82, 0x82,
        0x93, 0x93, 0x93, 0x93, 0xc3, 0xc3, 0xc3, 0xc3,
    }));

    state->invSubBytes();
    state->get(ct);
    EXPECT_THAT(ct, ElementsAreArray({
        0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 
        0x22, 0x22, 0x22, 0x22, 0x33, 0x33, 0x33, 0x33
    }));
}

TEST_F(AesStateTest, MixColumns) {
    using namespace ::testing;

    byte ct[16] { 0 };

    state->mixColumns();
    state->get(ct);
    EXPECT_THAT(ct, ElementsAreArray({
        0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 
        0x22, 0x22, 0x22, 0x22, 0x33, 0x33, 0x33, 0x33
    }));

    state->invMixColumns();
    state->get(ct);
    EXPECT_THAT(ct, ElementsAreArray({
        0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 
        0x22, 0x22, 0x22, 0x22, 0x33, 0x33, 0x33, 0x33
    }));
}

TEST_F(AesStateTest, MixColumns2) {
    using namespace ::testing;
    
    byte s[16] { 
        0x63,0x53,0xe0,0x8c,0x09,0x60,0xe1,0x04,
        0xcd,0x70,0xb7,0x51,0xba,0xca,0xd0,0xe7
    };
    byte ct[16] { 0 };
    
    state->set(s);
    state->mixColumns();
    state->get(ct);
    EXPECT_THAT(ct, ElementsAreArray({
        0x5f,0x72,0x64,0x15,0x57,0xf5,0xbc,0x92,
        0xf7,0xbe,0x3b,0x29,0x1d,0xb9,0xf9,0x1a
    }));
}

TEST_F(AesStateTest, AddRoundKey) {
    using namespace ::testing;
    
    byte ct[16] { 0 };

    state->addKey(ks->getRoundKey(0));
    state->get(ct);
    EXPECT_THAT(ct, ElementsAreArray({
        0x00, 0x01, 0x02, 0x03, 0x15, 0x14, 0x17, 0x16, 
        0x2a, 0x2b, 0x28, 0x29, 0x3f, 0x3e, 0x3d, 0x3c
    }));

    state->addKey(ks->getRoundKey(0));
    state->get(ct);
    EXPECT_THAT(ct, ElementsAreArray({
        0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 
        0x22, 0x22, 0x22, 0x22, 0x33, 0x33, 0x33, 0x33
    }));
}

TEST_F(AesStateTest, Format) {
    using namespace ::testing;
    
    state->shiftRows();
    EXPECT_THAT(state->format(), HasSubstr("00 11 22 33 11 22 33 00 22 33 00 11 33 00 11 22"));
    state->invShiftRows();
    EXPECT_THAT(state->format(), HasSubstr("00 00 00 00 11 11 11 11 22 22 22 22 33 33 33 33"));

    state->subBytes();
    EXPECT_THAT(state->format(), HasSubstr("63 63 63 63 82 82 82 82 93 93 93 93 c3 c3 c3 c3"));
    state->invSubBytes();
    EXPECT_THAT(state->format(), HasSubstr("00 00 00 00 11 11 11 11 22 22 22 22 33 33 33 33"));

    state->mixColumns();
    EXPECT_THAT(state->format(), HasSubstr("00 00 00 00 11 11 11 11 22 22 22 22 33 33 33 33"));
    state->invMixColumns();
    EXPECT_THAT(state->format(), HasSubstr("00 00 00 00 11 11 11 11 22 22 22 22 33 33 33 33"));

    state->addKey(ks->getRoundKey(0));
    EXPECT_THAT(state->format(), HasSubstr("00 01 02 03 15 14 17 16 2a 2b 28 29 3f 3e 3d 3c"));
    state->addKey(ks->getRoundKey(0));
    EXPECT_THAT(state->format(), HasSubstr("00 00 00 00 11 11 11 11 22 22 22 22 33 33 33 33"));
}

TEST(AesTest, Key128) {
    vector<byte> key {
        0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
        0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
    };

    string rk[10] {
        "2b7e151628aed2a6abf7158809cf4f3c",
        "a0fafe1788542cb123a339392a6c7605",
        "f2c295f27a96b9435935807a7359f67f",
        "3d80477d4716fe3e1e237e446d7a883b",
        "ef44a541a8525b7fb671253bdb0bad00",
        "d4d1c6f87c839d87caf2b8bc11f915bc",
        "6d88a37a110b3efddbf98641ca0093fd",
        "4e54f70e5f5fc9f384a64fb24ea6dc4f",
        "ead27321b58dbad2312bf5607f8d292f",
        "ac7766f319fadc2128d12941575c006e"
    };

    AESMath aesmath;
    AESKeySchedule ks(aesmath);
    ks.setKey(key);

    ASSERT_EQ(10, ks.getNrOfRounds());

    for(int i = 0; i < 10; ++i) {
        EXPECT_EQ(ks.formatRoundKey(i), rk[i])
            << "round key " << i << " doesnt match " << rk[i];
    }
}

TEST(AesTest, Key192) {
    vector<byte> key {
        0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52,
        0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
        0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b
    };

    string rk[12] {
        "8e73b0f7da0e6452c810f32b809079e5",
        "62f8ead2522c6b7bfe0c91f72402f5a5",
        "ec12068e6c827f6b0e7a95b95c56fec2",
        "4db7b4bd69b5411885a74796e92538fd",
        "e75fad44bb095386485af05721efb14f",
        "a448f6d94d6dce24aa326360113b30e6",
        "a25e7ed583b1cf9a27f939436a94f767",
        "c0a69407d19da4e1ec1786eb6fa64971",
        "485f703222cb8755e26d135233f0b7b3",
        "40beeb282f18a2596747d26b458c553e",
        "a7e1466c9411f1df821f750aad07d753",
        "ca4005388fcc5006282d166abc3ce7b5",
    };

    AESMath aesmath;
    AESKeySchedule ks(aesmath);
    ks.setKey(key);

    ASSERT_EQ(12, ks.getNrOfRounds());

    for(int i = 0; i < 12; ++i) {
        EXPECT_EQ(ks.formatRoundKey(i), rk[i])
            << "round key " << i << " doesnt match " << rk[i];
    }
}

TEST(AesTest, Key256) {
    vector<byte> key {
        0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
        0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
        0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
        0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
    };

    string rk[14] {
        "603deb1015ca71be2b73aef0857d7781",
        "1f352c073b6108d72d9810a30914dff4",
        "9ba354118e6925afa51a8b5f2067fcde",
        "a8b09c1a93d194cdbe49846eb75d5b9a",
        "d59aecb85bf3c917fee94248de8ebe96",
        "b5a9328a2678a647983122292f6c79b3",
        "812c81addadf48ba24360af2fab8b464",
        "98c5bfc9bebd198e268c3ba709e04214",
        "68007bacb2df331696e939e46c518d80",
        "c814e20476a9fb8a5025c02d59c58239",
        "de1369676ccc5a71fa2563959674ee15",
        "5886ca5d2e2f31d77e0af1fa27cf73c3",
        "749c47ab18501ddae2757e4f7401905a",
        "cafaaae3e4d59b349adf6acebd10190d",
    };

    AESMath aesmath;
    AESKeySchedule ks(aesmath);
    ks.setKey(key);

    ASSERT_EQ(14, ks.getNrOfRounds());

    for(int i = 0; i < 14; ++i) {
        EXPECT_EQ(ks.formatRoundKey(i), rk[i])
            << "round key " << i << " doesnt match " << rk[i];
    }
}

TEST(AesTest, Encrypt) {
    using namespace ::testing;

    byte plain_text[] { 
        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,    
        0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
    };    
    
    vector<byte> key { 
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,    
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f 
    };

    byte cipher_text[16] { 0 };
    AESCipher aes(false);
    ASSERT_EQ(true, aes.setKey(key));
    aes.encryptBlock(plain_text, cipher_text);

    EXPECT_THAT(cipher_text, ElementsAreArray({
        0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x4, 0x30, 
        0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a
    }));
}

TEST(AesTest, Decrypt) {
    using namespace ::testing;

    byte cipher_text[] {
        0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x4, 0x30, 
        0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a
    };
    
    vector<byte> key { 
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,    
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f 
    };

    byte plain_text[16] { 0 };
    AESCipher aes(false);
    ASSERT_EQ(true, aes.setKey(key));
    aes.decryptBlock(cipher_text, plain_text);

    EXPECT_THAT(plain_text, ElementsAreArray({
        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,    
        0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
    }));
}

TEST(AesTest, EncryptDecrypt) {
    using namespace ::testing;

    vector<byte> key { 
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f 
    };

    AESCipher aes(false);
    vector<byte> ct;

    string msg { "Dies ist ein Test mit einem langen Satz!!!!" };
    vector<byte> pt { AESCipher::toVector(msg) };

    ASSERT_EQ(true, aes.setKey(key));
    aes.process(pt, ct, false);

    EXPECT_THAT(ct, ElementsAreArray({
        0xeb, 0x4b, 0xf8, 0xf1, 0x1b, 0xcc, 0xc8, 0xea, 
        0xe4, 0xef, 0xca, 0xde, 0x86, 0x5c, 0x97, 0x82, 
        0xb6, 0x6f, 0x94, 0x88, 0x67, 0x38, 0x66, 0xef, 
        0xc1, 0x76, 0xec, 0xad, 0x8, 0x1a, 0xef, 0x35, 
        0x55, 0x83, 0x5, 0xf6, 0x15, 0xf7, 0xf0, 0x1, 
        0x3c, 0x34, 0x94, 0xaf, 0x9d, 0x32, 0xf9, 0xf2
    }));
    
    aes.process(ct, pt, true);
    string msg2 { AESCipher::toString(pt) };
    EXPECT_EQ(msg2, "Dies ist ein Test mit einem langen Satz!!!!");
}

TEST(AesTest, EncryptDecrypt2) {
    using namespace ::testing;

    vector<byte> key { 
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f 
    };

    AESCipher aes(false);
    vector<byte> ct;

    string msg { "Dies ist ein Test mit einem langen Satz!!!!" };
    vector<byte> pt { AESCipher::toVector(msg) };

    ASSERT_EQ(true, aes.setKey(key));
    ASSERT_EQ(true, aes.encrypt(pt, ct));

    EXPECT_THAT(ct, ElementsAreArray({
        0xeb, 0x4b, 0xf8, 0xf1, 0x1b, 0xcc, 0xc8, 0xea, 
        0xe4, 0xef, 0xca, 0xde, 0x86, 0x5c, 0x97, 0x82, 
        0xb6, 0x6f, 0x94, 0x88, 0x67, 0x38, 0x66, 0xef, 
        0xc1, 0x76, 0xec, 0xad, 0x8, 0x1a, 0xef, 0x35, 
        0x55, 0x83, 0x5, 0xf6, 0x15, 0xf7, 0xf0, 0x1, 
        0x3c, 0x34, 0x94, 0xaf, 0x9d, 0x32, 0xf9, 0xf2
    }));
    
    ASSERT_EQ(true, aes.decrypt(ct, pt));
    string msg2 { AESCipher::toString(pt) };
    EXPECT_EQ(msg2, "Dies ist ein Test mit einem langen Satz!!!!");
}

TEST(AesTest, RotWord) {
    using namespace ::testing;
    
    EXPECT_EQ(0x0000ff00, AESKeySchedule::rotWord(0x000000ff));
    EXPECT_EQ(0x00ff0000, AESKeySchedule::rotWord(0x0000ff00));
    EXPECT_EQ(0xff000000, AESKeySchedule::rotWord(0x00ff0000));
    EXPECT_EQ(0xff000000, AESKeySchedule::rotWord(0x00ff0000));
    EXPECT_EQ(0x000000ff, AESKeySchedule::rotWord(0xff000000));
    EXPECT_EQ(0x0f0f0f0f, AESKeySchedule::rotWord(0x0f0f0f0f));
    EXPECT_EQ(0xfebabeca, AESKeySchedule::rotWord(0xcafebabe));
}

TEST(AesTest, SubWord) {
    using namespace ::testing;
    
    AESMath aesmath;
    AESKeySchedule ks(aesmath);

    EXPECT_EQ(0xacea4bc1, ks.subWord(0xaabbccdd));
    EXPECT_EQ(0x637c777b, ks.subWord(0x00010203));
    EXPECT_EQ(0x35d7a80d, ks.subWord(0xd90d6ff3));
}









